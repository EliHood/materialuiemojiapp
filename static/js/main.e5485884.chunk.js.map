{"version":3,"sources":["logo.svg","components/Navbar.js","components/Footer.js","components/Emoji.js","components/emojiList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Navbar","react_default","a","createElement","AppBar_default","position","Toolbar_default","Typography_default","component","varient","color","withStyles","theme","text","paddingTop","spacing","unit","paddingLeft","paddingRight","paper","paddingBottom","list","marginBottom","subHeader","backgroundColor","palette","background","appBar","top","bottom","left","toolbar","alignItems","justifyContent","fabButton","zIndex","right","margin","props","classes","className","container","display","flexWrap","textField","marginLeft","marginRight","width","dense","marginTop","menu","emoji","shadows","root","flexGrow","minHeight","padding","textAlign","secondary","myitem","emojiButton","myitemList","notFound","cancel","Grid_default","item","sm","index_es","variant","items","length","map","i","key","List_default","ListItem_default","href","jsemoji","JSEMOJI","img_set","img_sets","emojione","path","supports_css","allow_native","replace_mode","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChange","e","preventDefault","setState","target","value","handleClick","n","replace_colons","concat","name","state","handleButton","emojiToggle","onSubmit","toConsumableArray","console","log","components_Navbar","Paper_default","TextField_default","id","label","dist_default","onEmojiClick","onClick","style","emojiList","components_Footer","Component","Boolean","window","location","hostname","match","createMuiTheme","primary","light","main","danger","ReactDOM","render","styles","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e5485884.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\n\nconst Navbar = () => {\n    return (\n        <div>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <Typography component=\"h2\" varient=\"h2\" color=\"inherit\">\n                        Emoji Material UI Example \n                    </Typography>\n                </Toolbar>\n            </AppBar>\n        </div>\n    )\n}\n\nexport default Navbar;","import React, { Component } from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport { withStyles } from '@material-ui/core/styles';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\n\nconst styles = theme => ({\n    text: {\n      paddingTop: theme.spacing.unit * 2,\n      paddingLeft: theme.spacing.unit * 2,\n      paddingRight: theme.spacing.unit * 2,\n    },\n    paper: {\n      paddingBottom: 50,\n    },\n    list: {\n      marginBottom: theme.spacing.unit * 2,\n    },\n    subHeader: {\n      backgroundColor: theme.palette.background.paper,\n    },\n    appBar: {\n      top: 'auto',\n      bottom: 0,\n      left: 0,\n    },\n    toolbar: {\n      alignItems: 'center',\n      justifyContent: 'space-between',\n    },\n    fabButton: {\n      position: 'absolute',\n      zIndex: 1,\n      top: -30,\n      left: 0,\n      right: 0,\n      margin: '0 auto',\n    },\n  });\n  \n\nconst Footer = props => {\n    const { classes } = props;\n    return(\n\n        <div>\n\n        <AppBar position=\"absolute\" color=\"secondary\" className={classes.appBar}>\n            <Toolbar className={classes.toolbar}>\n                <Typography component=\"h2\" varient=\"h2\" color=\"inherit\">\n                Emoji Material UI Example \n                </Typography>\n            </Toolbar>\n        </AppBar>\n\n        </div>\n    )\n\n\n}\n\nexport default withStyles(styles) (Footer) ;","import React, { Component } from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport { withStyles } from '@material-ui/core';\nimport EmojiPicker from 'emoji-picker-react';\n\nconst styles = theme => ({\n    container: {\n      display: 'flex',\n      flexWrap: 'wrap',\n    },\n    textField: {\n      marginLeft: theme.spacing.unit,\n      marginRight: theme.spacing.unit,\n      width: 200,\n    },\n    dense: {\n      marginTop: 19,\n    },\n    menu: {\n      width: 200,\n    },\n    emoji:{\n        margin:'40px 0px'\n    }\n});\n\nconst Emoji = props => {\n    const {classes} = props\n    return(\n        <div  className={classes.emoji}>\n\n            {/* <TextField\n                id=\"standard-name\"\n                label=\"Emoji\"\n                className={classes.textField}\n                value={props.emoji}\n                onChange={props.onChange}\n                margin=\"normal\"\n            /> */}\n              \n\n        </div>\n    )\n\n\n\n}\n\nexport default withStyles(styles) (Emoji);","import React, {Component} from 'react';\nimport {withStyles} from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport {Typography, Button} from '@material-ui/core';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nconst styles = theme => ({\n    shadows: [\"none\"],\n    spacing: 8,\n    root: {\n        flexGrow: 1,\n        minHeight: '800px',\n\n        position: 'relative'\n    },\n    paper: {\n        padding: theme.spacing.unit * 2,\n        textAlign: 'left',\n        width: '500px',\n        color: theme.palette.text.secondary\n    },\n    textField: {\n        width: '400px'\n    },\n    myitem: {\n        margin: '40px'\n    },\n    emoji: {\n        margin: '40px'\n    },\n    emojiButton: {\n        margin: '20px 0px'\n    },\n    myitemList: {\n        margin: '20px 0px'\n    },\n    notFound: {\n        margin: '20px 0px'\n    },\n    cancel: {\n        margin: '20px 0px'\n    }\n});\n\nconst EmojiList = (props) => {\n\n    return (\n\n        <Grid item sm={4} className={props.classes.myitem}>\n\n            <Typography variant=\"h2\" component=\"h2\">\n                Results\n            </Typography>\n            {props.items.length > 0\n                ? (props.items.map((item, i) => (\n                    <div key={i}>\n                        <List component=\"nav\">\n                            <ListItem href=\"#simple-list\">\n                                {item}\n                            </ListItem>\n                        </List>\n                    </div>\n                )))\n                : (\n                    <div>\n\n                        <Grid item sm={6} className={props.classes.notFound}>\n                            <Typography>\n                                No Items\n                            </Typography>\n\n                        </Grid>\n                    </div>\n\n                )}\n        </Grid>\n\n    )\n\n}\n\nexport default withStyles(styles)(EmojiList);","import React, {Component} from 'react';\nimport Navbar from './components/Navbar';\nimport {withStyles} from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport logo from './logo.svg';\nimport {Typography, Button} from '@material-ui/core';\nimport Footer from './components/Footer';\nimport Emoji from './components/Emoji';\nimport TextField from '@material-ui/core/TextField';\nimport EmojiPicker from 'emoji-picker-react';\nimport JSEMOJI from 'emoji-js';\nimport Icon from '@material-ui/core/Icon';\nimport EmojiList from './components/emojiList';\nlet jsemoji = new JSEMOJI();\n// set the style to emojione (default - apple)\njsemoji.img_set = 'emojione';\n// set the storage location for all emojis\njsemoji.img_sets.emojione.path = 'https://cdn.jsdelivr.net/emojione/assets/3.0/png/32/';\n// some more settings...\njsemoji.supports_css = false;\njsemoji.allow_native = true;\njsemoji.replace_mode = 'unified'\nconst styles = theme => ({\n    shadows: [\"none\"],\n    spacing: 8,\n    root: {\n        flexGrow: 1,\n        minHeight: '800px',\n\n        position: 'relative'\n    },\n    paper: {\n        padding: theme.spacing.unit * 2,\n        textAlign: 'left',\n        width: '500px',\n        color: theme.palette.text.secondary\n    },\n    textField: {\n        width: '400px'\n    },\n    myitem: {\n        margin: '40px'\n    },\n    emoji: {\n        margin: '40px'\n    },\n    emojiButton: {\n        margin: '20px 0px'\n    },\n    myitemList:{\n        margin:'20px 0px'\n    },\n    notFound: {\n        margin:'20px 0px'\n    },\n    cancel: {\n        margin: '20px 0px'\n    }\n});\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            emoji: '',\n            text: '',\n            items: [],\n            emojiToggle: false\n        }\n    }\n    onChange = (e) => {\n        e.preventDefault()\n        this.setState({text: e.target.value});\n    }\n    handleClick = (n, e) => {\n        let emoji = jsemoji.replace_colons(`:${e.name}:`);\n   \n        this.setState({\n            text: this.state.text + emoji,\n        });\n        // console.log(this.state.items)\n    }\n    handleButton = (e) => {\n        e.preventDefault();\n        if(!this.state.emojiToggle){\n          this.setState({emojiToggle: true})\n        }\n        else{\n          this.setState({emojiToggle: false})\n\n        }\n   \n    }\n    \n    onSubmit = (e) => {\n        e.preventDefault();\n        this.setState(\n          {\n            text: this.state.text,\n            items: [...this.state.items, this.state.text]\n          },\n          () => console.log(this.state.items)\n        );\n   \n    }\n    \n\n    render() {\n        const {classes} = this.props;\n        return (\n            <div className={classes.root}>\n                <Navbar/>\n                <Grid container spacing={12}>\n                    <Grid item sm={6} className={classes.myitem}>\n                        <Paper className={classes.paper}>\n                            <Typography variant=\"h2\" component=\"h2\">\n                                Insert An Emoji\n                            </Typography>\n                          {/* Begin Form */}\n                          <form>\n                            <TextField\n                                id=\"standard-name\"\n                                label=\"Enter Something\"\n                                className={classes.textField}\n                                value={this.state.text}\n                                onChange={this.onChange}\n                                margin=\"normal\"\n                              />\n                              {this.state.emojiToggle ? (\n                                    <div>\n                                        <EmojiPicker onEmojiClick={this.handleClick}/>\n                                        <Button\n                                            className={classes.cancel}\n                                            onClick={this.handleButton}\n                                            color=\"danger\"\n                                            variant=\"outlined\">\n                                            Close\n                                        </Button>\n                                    </div>\n                                )\n                                : (\n                                    <div>\n                                        <Button onClick={this.handleButton} color=\"primary\" variant=\"outlined\">\n                                            Show Emojis\n                                        </Button>\n\n                                        <Button onClick={this.onSubmit} style={{ marginLeft: '10px'}} color=\"primary\" variant=\"outlined\">\n                                            Submit\n                                        </Button>\n\n\n                                    </div>\n                                )}\n                              {/* End  Form */}\n                            </form>\n                        </Paper>\n                    </Grid>\n\n                    \n                <EmojiList items={this.state.items} />\n                </Grid>\n                <Footer/>\n            </div>\n        );\n    }\n}\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport indigo from '@material-ui/core/colors/indigo';\n\nconst theme = createMuiTheme({\n    shadows: [\"none\"],\n    palette: {\n        primary: {\n            light: '#757ce8',\n            main: '#7986cb',\n        },\n        secondary: {\n          main: '#f1f1f1',\n        },\n        danger: {\n          main: '#FF6347',\n        },\n      },\n});\n\nReactDOM.render(\n<MuiThemeProvider theme={theme}>\n    <App />\n</MuiThemeProvider >\n, \ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}